#!/bin/sh

## post-install.txt used with raspbian-ua-netinst
# after writing a netinst image to an sdcard (/dev/mmcblk0 in this example),
# download, edit, and copy to /boot folder of the netinst boot partition:
#   $ wget https://raw.githubusercontent.com/edlins/picontrol-netinst/master/post-install.txt
#   $ vi post-install.txt (to customize EXTRAS)
#   $ sudo mount /dev/mmcblk0p1 /mnt (or other mount point)
#   $ cp post-install.txt /mnt
#   $ mv /mnt/config-reinstall.txt /mnt/config.txt (if reinstalling)
#   $ sudo umount /dev/mmcblk0p1
# then remove the sdcard, insert into an unpowered network-connected pi, power up, wait 30 minutes, play!

echo "Starting post-install.txt"

# extra scripts to execute for additional installs
# they will be downloaded and executed via `chroot /rootfs netinst.sh` by netinst
# add or remove EXTRAS as needed
EXTRAS=""
EXTRAS="$EXTRAS http://raw.githubusercontent.com/edlins/pibuttonpower/master/netinst.sh"
EXTRAS="$EXTRAS http://raw.githubusercontent.com/edlins/libPCA9685/master/netinst.sh"

# jackd runs debconf to prompt the user for some bullshit.  turn that off
echo ""
echo "= Disabling debconf prompting"
export DEBIAN_FRONTEND=noninteractive

echo ""
echo "= Localizing"
# set the locale
echo "en_US.UTF-8 UTF-8" > /rootfs/etc/locale.gen
chroot /rootfs /usr/sbin/locale-gen

# set the timezone
echo "US/Mountain" > /rootfs/etc/timezone
chroot /rootfs dpkg-reconfigure --frontend noninteractive tzdata

# create and activate swap
echo ""
echo "= Creating swap"
chroot /rootfs dd if=/dev/zero of=/swap bs=1M count=512 && mkswap /rootfs/swap
echo "/swap none swap sw 0 0" >> /rootfs/etc/fstab


echo ""
echo "=== Adding packages ==="
# better memory management
echo ""
echo "= Adding raspi-copies-and-fills"
chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install raspi-copies-and-fills

# improved rng
echo ""
echo "= Adding rng"
chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install rng-tools
echo "bcm2708-rng" >> /rootfs/etc/modules

## alsa utilities
#echo ""
#echo "= Adding alsa-utils"
#chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install alsa-utils
#echo ""
#echo "= Enabling audio in config.txt"
#echo "dtparam=audio=on" >> /rootfs/boot/config.txt

# install git
echo ""
echo "= Adding git-core"
chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install git-core

## install g++
#echo ""
#echo "= Adding g++"
#chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install g++

## install make
#echo ""
#echo "= Adding make"
#chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install make

## install sudo
#echo ""
#echo "= Adding sudo"
#chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install sudo

## alsa/asoundlib.h
#echo ""
#echo "= Adding libasound2-dev"
#chroot /rootfs /usr/bin/apt-get -y --no-install-recommends install libasound2-dev


echo ""
echo "= Adding extras"
# download and execute the EXTRA scripts
mkdir /rootfs/tmp/extras
for EXTRA in $EXTRAS; do
  chroot /rootfs /bin/sh << EOFextras
    cd /tmp/extras
    echo "/usr/bin/wget --no-check-certificate --content-disposition $EXTRA"
    /usr/bin/wget --no-check-certificate --content-disposition "$EXTRA"
EOFextras
done

chroot /rootfs find /tmp/extras -type f -exec sh {} \;

echo "Finished!"
